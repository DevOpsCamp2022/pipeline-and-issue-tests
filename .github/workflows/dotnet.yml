name: 'apis/poi/ tests'

on:
  push:
    paths:
    - 'apis/poi/**'
    branches: [ main ]
  pull_request:
    paths:
    - 'apis/poi/**'
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: 'apis/poi/'

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      id: setup
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 3.1.x
  
    - name: Restore dependencies
      id: dependencies
      run: dotnet restore

    - name: Build
      id: build
      run: dotnet build --no-restore

    - name: Test
      id: test
      run: dotnet test --no-build --filter "FullyQualifiedName~UnitTest" --logger "trx;LogFileName=UnitTestResults.trx" --results-directory ./TestResults

    - name: CreateIssue
      if: ${{ failure() }}
      run: |
        curl \
        -X POST \
        -H "Accept: application/vnd.github.v3+json" \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        https://api.github.com/repos/DevOpsOpenHack/devopsohzuehlke2/issues \
        -d '{"title": "${{ github.workflow }} has failed: ${{ github.run_id }}",
        "body": "Failure in run: _${{ github.run_id }}_."
        }'

    - name: Comment PR
      uses: allthatjazzleo/actions-pull-request-add-comment@master
      if: github.event_name == 'pull_request' && failure()
      with:
        message: "### Unit Test `failure`
<details>
<summary>Workflow details</summary>

Workflow name: `${{ github.workflow }}`
Action: `${{ github.event_name }}`
Job: `${{ github.job }}`
PR: #${{ github.event.number }}
</details>

Test details: [Run #${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
Pusher: @${{ github.actor }}"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-poi-api:
    needs: tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: 'apis/poi/web'

    steps:
    - uses: actions/checkout@v3

    # Azure Login
    - name: Azure Login
      run: |
        az login --service-principal --username "${{ secrets.ARM_CLIENT_ID }}" --password "${{ secrets.ARM_CLIENT_SECRET }}" --tenant "${{ secrets.ARM_TENANT_ID }}" 
        az account set --subscription "${{ secrets.ARM_SUBSCRIPTION_ID }}"
    
    - name: Set build version
      id: build-version
      run: echo "::set-output name=tag::$(date +%s)"

    # Build and push image to acr
    - name: Build and push the docker image
      run: az acr build --image devopsoh/api-poi:${{ steps.build-version.outputs.tag }} --registry ${{secrets.CONTAINER_LOGIN_SERVER}} --build-arg build_version=${{ steps.build-version.outputs.tag }} --file Dockerfile .

    - name: Deploy to Staging
      uses: Azure/webapps-deploy@v2
      with:
        app-name: devopsoh81421poi
        slot-name: staging # optional, default is production
        images: ${{secrets.CONTAINER_LOGIN_SERVER}}/devopsoh/api-poi:${{ steps.build-version.outputs.tag }}
