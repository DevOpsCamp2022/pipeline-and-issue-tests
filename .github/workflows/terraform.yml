name: 'Terraform'

on:
  push:
    paths:
    - 'iac/terraform/**'
    branches:
    - main
  pull_request:
    paths:
    - 'iac/terraform/**'
  
env:
  tf_actions_working_dir: iac/terraform

jobs:
  tests:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: check env
      run: pwd; env

    # Azure Login
    - name: Azure Login
      run: |
        az login --service-principal --username "${{ secrets.ARM_CLIENT_ID }}" --password "${{ secrets.ARM_CLIENT_SECRET }}" --tenant "${{ secrets.ARM_TENANT_ID }}" 
        az account set --subscription "${{ secrets.ARM_SUBSCRIPTION_ID }}"

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#    - name: Terraform Init (local only)
#      if: github.ref != 'refs/heads/main' || github.event_name != 'push'
#      run: terraform init -backend=false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init (with backend)
#      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform init -backend-config=storage_account_name="${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}" -backend-config=container_name="${{ secrets.TFSTATE_STORAGE_CONTAINER_NAME }}" -backend-config=key="${{ secrets.TFSTATE_KEY }}" -backend-config=resource_group_name="${{ secrets.TFSTATE_RESOURCES_GROUP_NAME }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format Check
      run: terraform fmt -check

    # Validate config files
    - name: Terraform Validate
      run: terraform validate

    # Create plan (full validation with current settings)
    - name: Terraform Plan
      run: terraform plan -var="location=${{ secrets.LOCATION }}"

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -var="location=${{ secrets.LOCATION }}"
